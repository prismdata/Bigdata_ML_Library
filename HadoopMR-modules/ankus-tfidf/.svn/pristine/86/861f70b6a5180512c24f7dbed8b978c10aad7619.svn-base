package org.ankus.mapreduce.algorithms.utils.TF_IDF;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;

import org.ankus.util.ArgumentsConstants;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
 
/**
 * WordsInCorpusTFIDFReducer calculates the number of documents in corpus that a given key occurs and the TF-IDF computation.
 * The total number of D is acquired from the job name<img draggable="false" class="emoji" alt="üôÇ" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/1f642.svg"> It is a dirty hack, but the only way I could communicate the number from
 * the driver.
 * @author Marcello de Sales (marcello.desales@gmail.com)
 */
public class TFIDFReducerSimple extends Reducer<Text, Text, Text, Text> {
 
    private static final DecimalFormat DF = new DecimalFormat("###.####");
    MultipleOutputs<Text, Text> mos  = null;
    private Logger logger = LoggerFactory.getLogger(TFIDFReducerSimple.class);
    Configuration conf = null;
    String output_path = "";
    public TFIDFReducerSimple() {
    }
    protected void setup(Context context) throws IOException, InterruptedException
	{
		conf = context.getConfiguration();
		output_path = conf.get(ArgumentsConstants.OUTPUT_PATH)+"_Raw/";
		mos = new MultipleOutputs<Text, Text>(context);
		
	}
    
    protected void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
    	
        int NumberOfDocuments = Integer.parseInt(context.getJobName()); //Ï†ÑÏ≤¥ Î¨∏ÏÑúÏùò Ïàò.
        
        int DocumentCountHasKey = 0;
        
        Map<String, String> tempFrequencies = new HashMap<String, String>();
        System.out.println("key:" + key.toString());
        for (Text val : values)
        {
            String[] KeyCount_WordCount = val.toString().split("=");
            System.out.println("Value: " + val.toString());
            DocumentCountHasKey++; //keyÎ•º Í∞ÄÏßÑ Î¨∏ÏÑúÏù¥ Ïàò Ïπ¥Ïö¥Ìä∏.
            
            //Î¨∏ÏÑúÏùò ÏàòÏóê Îî∞Îùº HashMapÏùò ÌÅ¨Í∞ÄÍ∞Ä Îã¨ÎùºÏßÑÎã§.
            String DocID = KeyCount_WordCount[0];
            String keyCountOnDocID = KeyCount_WordCount[1];
            tempFrequencies.put( DocID , keyCountOnDocID ); //key : Î¨∏ÏÑú ID, Value : Î¨∏ÏÑú ÎÇ¥ Key Í∞ØÏàò/Î¨∏ÏÑú ÎÇ¥ Îã®Ïñ¥Ïùò Ïàò.
        }
        for (String DocID : tempFrequencies.keySet())
        {
            String[] wordFrequenceAndTotalWords = tempFrequencies.get(DocID).split("/"); 

            double tf = Double.valueOf(Double.valueOf(wordFrequenceAndTotalWords[0])
            									/ Double.valueOf(wordFrequenceAndTotalWords[1]));
 
            double idf = (double) NumberOfDocuments / (double) DocumentCountHasKey;
            //Ï†ÑÏ≤¥ Î¨∏ÏÑúÏùò ÏàòÏôÄ ÌÇ§Î•º Í∞ÄÏßÑ Î¨∏ÏÑúÏùò ÏàòÍ∞Ä Í∞ôÏúºÎ©¥ TFÎ•º  TFIDFÎ°ú ÏÇ¨Ïö©ÌïòÍ≥†
            //Îã§Î•¥Î©¥ TF * MATH.LOG10(IDF)Î•º TFÎ•º TFIDFÎ°ú ÏÇ¨Ïö©ÌïúÎã§.
            double tfIdf = NumberOfDocuments == DocumentCountHasKey ? tf : tf * Math.log10(idf);
            
            DocID = DocID.replace(":", "_");
            DocID = DocID.replace(" ", "_");
            String emit_key  = key + "," + DocID;         
            String emit_value_detail = DocumentCountHasKey + "/"
            										+ NumberOfDocuments + " , " + wordFrequenceAndTotalWords[0] + "/"
            										+ wordFrequenceAndTotalWords[1] ;
         
            String emit_value = DF.format(tf)  + "," +DF.format(Math.log10(idf))+ "," + DF.format(tfIdf) + ","+emit_value_detail;
            System.out.println(emit_key +"\t" + emit_value );
            
            String path_mos = output_path + DocID ;
            mos.write(new Text(emit_key), new Text(emit_value), path_mos);
        }
        tempFrequencies = null;
        
        Runtime r = Runtime.getRuntime();
        DecimalFormat format = new DecimalFormat("###,###,###.##");
        long max = r.maxMemory();//JVMÏù¥ ÌòÑÏû¨ ÏãúÏä§ÌÖúÏóê ÏöîÍµ¨ Í∞ÄÎä•Ìïú ÏµúÎåÄ Î©îÎ™®Î¶¨Îüâ, Ïù¥ Í∞íÏùÑ ÎÑòÏúºÎ©¥ OutOfMemory Ïò§Î•òÍ∞Ä Î∞úÏÉù Ìï©ÎãàÎã§.
        long total = r.totalMemory();//JVMÏù¥ ÌòÑÏû¨ ÏãúÏä§ÌÖúÏóê ÏñªÏñ¥ Ïì¥ Î©îÎ™®Î¶¨Ïùò Ï¥ùÎüâ
        long free = r.freeMemory();//JVMÏù¥ ÌòÑÏû¨ ÏãúÏä§ÌÖúÏóê Ï≤≠Íµ¨ÌïòÏó¨ ÏÇ¨Ïö©Ï§ëÏù∏ ÏµúÎåÄ Î©îÎ™®Î¶¨(total)Ï§ëÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î©îÎ™®Î¶¨       
        logger.info("Max:" + format.format(max) + ", Total:" + format.format(total) + ", Free:"+format.format(free));
    }
    @Override
    protected void cleanup(Context context) throws IOException, InterruptedException
    {
    	
		mos.close();//Dynamic File Name provider stream close
		int mb = 1024*1024;
		Runtime runtime = Runtime.getRuntime();
		logger.info("Memoery:"+ (runtime.totalMemory() - runtime.freeMemory()));
        if((runtime.totalMemory() - runtime.freeMemory()) / mb > runtime.maxMemory() / mb)
		{
			System.gc ();
			System.runFinalization ();
		}
		System.out.println("cleanup");
    	
    }
}
