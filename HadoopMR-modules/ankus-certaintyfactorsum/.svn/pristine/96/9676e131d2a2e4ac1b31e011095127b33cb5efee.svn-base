/*
 * Copyright (C) 2011 ankus (http://www.openankus.org).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.ankus.mapreduce.algorithms.statistics.certaintyfactorsum;

import java.io.IOException;
import java.util.Iterator;

import org.ankus.util.ArgumentsConstants;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

/**
 * CFSumReducer
 * @desc (common) reducer class for certainty factor based summation mr job (1-step / 2-step)
 * @version 0.0.1
 * @date : 2013.08.20
 * @author Moonie
 */
public class CFSumReducer extends Reducer<Text, Text, NullWritable, Text>{

    // value for vf sum max
	private double sumMax;
	private String delimiter;

    @Override
    protected void setup(Context context) throws IOException, InterruptedException
    {
        sumMax = Double.parseDouble(context.getConfiguration().get(ArgumentsConstants.CERTAINTY_FACTOR_MAX, "1"));
        // TODO '\t'을 변수명으로 수정해야 함
        delimiter = context.getConfiguration().get(ArgumentsConstants.DELIMITER, "\t");
    }

    @Override
	protected void reduce(Text key, Iterable<Text> values, Context context)	throws IOException, InterruptedException
	{
		Iterator<Text> iterator = values.iterator();
		double m_sum = 0;

        while (iterator.hasNext())
        {
            double value = Double.parseDouble(iterator.next().toString());
            m_sum = m_sum + value - (m_sum * value / sumMax);
        }
        context.write(NullWritable.get(), new Text(key.toString() + delimiter + m_sum));
	}

    @Override
    protected void cleanup(Context context) throws IOException, InterruptedException
    {
    }
}
