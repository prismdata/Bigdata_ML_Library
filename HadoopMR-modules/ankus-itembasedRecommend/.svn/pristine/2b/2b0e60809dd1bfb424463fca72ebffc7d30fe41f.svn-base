/*
 * Copyright (C) 2011 ankus (http://www.openankus.org).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.ankus.util;

//import org.ankus.mapreduce.algorithms.classification.knn.kNNDistanceComputeMapper;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

/**
 * 하둡 디렉토리 제어 클래스
 * @version 0.0.1
 * @date : 2013.08.23
 * @author Moonie Song
 */
public class CommonMethods {
	private Logger logger = LoggerFactory.getLogger(CommonMethods.class);
	/**
	 * 하둡 설정 정보 로드
	 * @auth Moonie Song
	 * @parameter
	 * @return Properties
	 */
    public static Properties getConfigProperties() throws IOException, NullPointerException {

        InputStream resourceAsStream = null;
        Properties properties = new Properties();
        try{
            // Get configuration properties for hdfs output path from user
            resourceAsStream = CommonMethods.class.getResourceAsStream("/config.properties");
            properties.load(resourceAsStream);
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            resourceAsStream.close();
        }
        return properties;
    }

    /**
     * HDFS상에 폴더를 생성한다.
     * @auth Moonie Song
     * @parameter  String outputPath
     * @return String
     */
    public static String createDirectoryForHDFS(String outputPath) throws IOException {

        Properties configProperties = getConfigProperties();

        // Generate date format for create file name
        DateFormat dateFormat = new SimpleDateFormat(Constants.YYYYMMDDHHMMSS);
        Date date = new Date();
        String currentDate = dateFormat.format(date);

        // Get key (hdfs.output.dir) from config.properties
        String hdfsTempDir = configProperties.get(Constants.MIDTERM_PROCESS_OUTPUT_DIR).toString();

        /**
         * Check key of properties
         * If value is null, add '_prepare' of output path by user
         * Else value is not null, set value to config.properties by user
         */
        String tempDirectory = null;

        if(hdfsTempDir.equals("")){
            tempDirectory = outputPath + "_prepare";
        }else{
            tempDirectory = hdfsTempDir + "/" + currentDate;
        }

        return tempDirectory;
    }
}
