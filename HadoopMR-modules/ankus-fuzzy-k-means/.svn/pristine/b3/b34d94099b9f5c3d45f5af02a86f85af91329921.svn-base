package org.ankus.mapreduce.algorithms.clustering.FuzzyCMeans;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.ankus.util.ArgumentsConstants;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

//각 feature마다 하나씩 할당.

public class Reducer_Membership extends Reducer<Text, Text, Text, Text> {
	private Logger logger = LoggerFactory.getLogger(Reducer_Membership.class);
	String delimiter = "";
	@Override
	protected void setup(Context context) throws IOException, InterruptedException
	{
		logger.info("setup");
		Configuration conf = context.getConfiguration();
		delimiter = conf.get(ArgumentsConstants.DELIMITER);
	}
	
	protected void reduce(Text key, Iterable<Text> weightNwVector, Context context) throws IOException, InterruptedException
	{
		String ClusterKey = key.toString();
		logger.info("Cluster: " + ClusterKey);
		Double sumOfweight2 = 0.0;
		Double sumofWeightedAttrbute = 0.0;
		
		//element index, colument
		HashMap<String, List<Double>> HashElement = new HashMap<String, List<Double>>();
		HashMap<String, Double> newCentroid = new HashMap<String, Double>();
		Iterator itr = weightNwVector.iterator();
		//index마다 Summary of Weight, WeightedAttribute를 계산.
		//weightNwVector에 개별 개체의 모든 속성 정보가 들어가 있음.
		//출력은 Cluster ID, index, new Centroid가 됨.
//		Centroid centroid = new Centroid();
		HashMap<Integer , Centroid> hashCentroid = new HashMap<Integer, Centroid>();
		int index = 0;
		for(Text wNwe: weightNwVector)
		{
//			****split weight  weighted element
			String[] indexNWeigthEleVector  = wNwe.toString().split("\u0001");
			index = Integer.parseInt(indexNWeigthEleVector[0]);
			
//			String[] elmentNWeigthEleVector = input_raw[1].toString().split("\u0002");
//			****split weight  and weighted element
			String[] w_we = indexNWeigthEleVector[1].split("\u0002");
			
			double weight = Double.parseDouble(w_we[0]);
//			****Sum of Weight^2
//			sumOfweight2 += Math.pow(weight, 2);
			
			double weightedAttribute  = Double.parseDouble(w_we[1]);
//			sumofWeightedAttrbute += weightedAttribute;
			
			if(hashCentroid.containsKey(index) == true)
			{
				Centroid centroid = hashCentroid.get(index);
				centroid.weight += Math.pow(weight, 2);
				centroid.weightedAttribute += Double.parseDouble(w_we[1]);
			}
			else
			{
				Centroid centroid = new Centroid();
				centroid.weight += Math.pow(weight, 2);
				centroid.weightedAttribute += Double.parseDouble(w_we[1]);
				hashCentroid.put(index, centroid);
			}
		}
		for( Map.Entry<Integer, Centroid> ClusterCentroid : hashCentroid.entrySet() )
		{
//			System.out.println( String.format("키 : %s, 값 : %s", elem.getKey(), elem.getValue()) );
			int ccai = ClusterCentroid.getKey();
			
			Centroid centroid = ClusterCentroid.getValue();
			
			double wa = centroid.weightedAttribute;
			double w = centroid.weight;
			
			context.write(new Text(ccai+""), new Text(index + "," + (wa/w)));
        }
         
	}
}
