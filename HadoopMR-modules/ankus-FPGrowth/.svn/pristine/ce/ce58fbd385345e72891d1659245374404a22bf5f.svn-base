package org.ankus.mapreduce.algorithms.association.pfpgrowth;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.TreeMap;

import org.ankus.util.ArgumentsConstants;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PfpgrowthPatternGen_Map extends 
				Mapper<LongWritable , Text, Text, Text>
{
	
	private Logger logger = LoggerFactory.getLogger(PfpgrowthPatternGen_Map.class);
	
	public void map(LongWritable key, Text input_branch, Context context) 
			throws IOException, InterruptedException
			{	
				String[] branchs = input_branch.toString().split("\t");				
				logger.info("TO RULE GEN #KEY:" + branchs[0] + ",VALUE:" + branchs[1]);				
				Text output_key = new Text(branchs[0]);//터미널 노드 확보				
				Text output_value = new Text(branchs[1]);				
				context.write(output_key,  output_value);
			}
}
